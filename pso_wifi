import numpy as np
import matplotlib.pyplot as plt
import math
import time

# Grava o tempo de início
start_time = time.time()

# Parâmetros do problema
num_users = 100
grid_size = 1000
coverage_radius = 300  # Ajuste conforme necessário
min_distance_between_points = 200  # Distância mínima entre pontos WiFi
altura = 50

# Gerar posições aleatórias para usuários
user_positions = np.random.randint(0, grid_size, size=(num_users, 2))


# Função para calcular a distância entre dois pontos
def calculate_distance(point1, point2):
    return np.linalg.norm(point1 - point2)


# Função para calcular o path loss usando o modelo SUI
def calculate_pathloss_sui(user_pos, wifi_pos, frequency, d):
    # Parâmetros do modelo SUI
    alpha = 4.0  # Expoente do caminho (path) - relacionado ao ambiente urbano
    beta_user = 0.0065 * 50  # Atenuação devida à altura da antena do usuário (50 metros)
    beta_bs = 0  # Atenuação devida à altura da antena da estação base
    gamma = 0  # Constante

    # Cálculo do path loss usando o modelo SUI
    delta_f = 20 * math.log10(frequency) + 20 * math.log10(d) + 20 * math.log10(4 * math.pi / 3e8) - 147.55
    pathloss = delta_f + 10 * alpha * math.log10(d) + beta_user - beta_bs - gamma

    return pathloss


# Função de aptidão
def fitness(wifi_positions, user_positions):
    signal_power = -100
    noise_power = 10  # Adicionamos uma potência de ruído constante para simplificar o exemplo
    frequency = 2.5
    total_users_connected = 0
    connected_users = set()

    for user_pos in user_positions:
        max_snr = float('-inf')

        for wifi_pos in wifi_positions:
            distance = calculate_distance(user_pos, wifi_pos)
            pathloss_sui = calculate_pathloss_sui(user_pos, wifi_pos, frequency, distance)
            received_power = signal_power - pathloss_sui
            snr = received_power - noise_power

            if snr > 25:
                connected_users.add(tuple(user_pos))
                break

    total_users_connected = len(connected_users)
    return total_users_connected, len(wifi_positions)


# Função para inicializar as partículas
def initialize_particles(num_particles, space_boundaries):
    particles = np.random.uniform(low=space_boundaries[0], high=space_boundaries[1],
                                  size=(num_particles, 8)) #aqui altera a quant uav ex: 10->5 uavs
    return particles


# Função de atualização da velocidade
def update_velocity(particle, velocity, personal_best, global_best, inertia_weight, cognitive_weight, social_weight):
    inertia_term = inertia_weight * velocity
    cognitive_term = cognitive_weight * np.random.rand() * (personal_best - particle)
    social_term = social_weight * np.random.rand() * (global_best - particle)
    new_velocity = inertia_term + cognitive_term + social_term
    return new_velocity


# Função de atualização da posição
def update_position(particle, velocity, space_boundaries):
    new_position = particle + velocity
    # Garantir que as novas posições estejam dentro dos limites do espaço
    new_position = np.clip(new_position, space_boundaries[0], space_boundaries[1])
    return new_position


# Parâmetros do PSO
num_particles = 30
max_iterations = 100
space_boundaries = (0, grid_size)  # Limites do espaço bidimensional

# Inicialização das partículas e velocidades
particles = initialize_particles(num_particles, space_boundaries)
particles_velocity = np.zeros_like(particles)  # Inicialização das velocidades das partículas

# Inicialização dos melhores resultados pessoais e globais
personal_best_positions = particles.copy()
personal_best_fitness = np.zeros(num_particles)
global_best_position = np.zeros(10)
global_best_fitness = -np.inf

# Lista para armazenar a evolução do fitness
fitness_evolution = []

# Algoritmo PSO
for iteration in range(max_iterations):
    for i in range(num_particles):
        # Avaliação da função de fitness para cada partícula
        wifi_positions = particles[i].reshape(-1, 2)
        total_users_connected, num_wifi_points = fitness(wifi_positions, user_positions)
        fitness_score = total_users_connected

        # Atualização do melhor pessoal
        if fitness_score > personal_best_fitness[i]:
            personal_best_fitness[i] = fitness_score
            personal_best_positions[i] = particles[i].copy()

        # Atualização do melhor global
        if fitness_score > global_best_fitness:
            global_best_fitness = fitness_score
            global_best_position = particles[i].copy()

        # Atualização da velocidade e posição da partícula
        inertia_weight = 0.3
        cognitive_weight = 0.5
        social_weight = 0.8

        new_velocity = update_velocity(
            particles[i], particles_velocity[i], personal_best_positions[i], global_best_position,
            inertia_weight, cognitive_weight, social_weight)
        particles[i] = update_position(particles[i], new_velocity, space_boundaries)

    # Armazenar o fitness atual na lista de evolução
    fitness_evolution.append(global_best_fitness)

# Resultado final
print("Melhor posição dos pontos de acesso:", global_best_position)
print("Fitness máximo alcançado:", global_best_fitness)

# Plotar o resultado
plt.figure(figsize=(8, 8))
plt.scatter(user_positions[:, 0], user_positions[:, 1], marker='o', label='Usuários')
plt.scatter(global_best_position[::2], global_best_position[1::2], marker='x', color='red', label='Pontos de Acesso')
for i in range(0, len(global_best_position), 2):
    circle = plt.Circle((global_best_position[i], global_best_position[i + 1]), coverage_radius, color='gray',
                        alpha=0.2)
    plt.gca().add_patch(circle)

plt.title('Maximiza área de cobertura')
plt.xlabel('Coordenada X')
plt.ylabel('Coordenada Y')
plt.legend()
plt.grid(True)
plt.show()
